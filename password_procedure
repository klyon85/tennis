PHP password procedure:

When a user logs in and signs up, the password will be through a POST array.

First use the basic security precautions of:

htmlspecialchars to remove the ability of XSS attacks
trim to remove whitespace that may confuse the user
check the length and whether the variable is actually set
be sure to remove all escape characters

Upon receiving the cleartext password, we will use this function:

password_hash(GIVEN PASSWORD AS STRING LITERAL, PASSWORD_DEFAULT); --> this currently uses BCrypt, but the PHP manual advises the encryption mechanism may change, leading to more bloated passwords up to 255 chars

This will generate a fairly complex password using the hash that has a very low likelihood of hash collision. 

If someone is logging in with a password, we still receive it through the POST array. We then hash it like above, but we need to verify it using the password_verify function.

***NEED TO USE SINGLE QUOTES WHEN VERIFYING PASSWORD, OTHERWISE IF THE PASSWORD HAS A $ IT WILL BE INTERPRETED AS A VARIABLE***

We can use: $hash = password_hash(GIVEN PASSWORD, PASSWORD_DEFAULT);
and then check the hash equality using: if(password_verify(GIVEN PASSWORD, $hash) { execute code saying login is successful }

----------------------------------------------
#file login.php

<?php

    //if we have a form pass field called myPass

    $givenPass = $_POST['myPass'];

    $hash = password_hash($givenPass, PASSWORD_DEFAULT);

    if(password_verify($givenPass, $hash) {
        
        print "Login was successful!";

    }

    else
    
        print "Login failed!"

?>
---------------

For our signup, we will simply need to use the password_hash function with the same default settings BEFORE inserting it into our database.